name: Build Wheels

on:
  push:
    branches: [ main, master ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  build_wheels:
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
      - uses: actions/checkout@v4

      - name: Build wheels
        uses: pypa/cibuildwheel@v2.21.3
        env:
          # 构建的Python版本
          CIBW_BUILD: cp38-* cp39-* cp310-* cp311-* cp312-*
          # 跳过32位和i686
          CIBW_SKIP: "*-win32 *-manylinux_i686 *-musllinux_i686"
          # 安装Rust
          CIBW_BEFORE_ALL_LINUX: |
            curl https://sh.rustup.rs -sSf | sh -s -- --default-toolchain stable -y &&
            yum install -y openssl-devel || apt-get update && apt-get install -y libssl-dev
          CIBW_BEFORE_ALL_WINDOWS: |
            rustup-init.exe -y --default-toolchain stable &&
            rustup target add x86_64-pc-windows-msvc
          CIBW_BEFORE_ALL_MACOS: |
            curl https://sh.rustup.rs -sSf | sh -s -- --default-toolchain stable -y
          # 设置PATH
          CIBW_ENVIRONMENT_LINUX: 'PATH="$PATH:$HOME/.cargo/bin"'
          CIBW_ENVIRONMENT_WINDOWS: 'PATH="$PATH;$USERPROFILE\.cargo\bin"'
          CIBW_ENVIRONMENT_MACOS: 'PATH="$PATH:$HOME/.cargo/bin"'
          # 构建设置
          CIBW_BUILD_VERBOSITY: 1

      - uses: actions/upload-artifact@v4
        with:
          name: wheels-${{ matrix.os }}
          path: ./wheelhouse/*.whl

  build_sdist:
    name: Build source distribution
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install maturin

      - name: Build sdist
        run: maturin sdist

      - uses: actions/upload-artifact@v4
        with:
          name: sdist
          path: target/wheels/*.tar.gz

  upload_pypi:
    needs: [build_wheels, build_sdist]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    environment: release
    permissions:
      id-token: write
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: wheels-ubuntu-latest
          path: dist
      - uses: actions/download-artifact@v4
        with:
          name: wheels-windows-latest
          path: dist
      - uses: actions/download-artifact@v4
        with:
          name: wheels-macos-latest
          path: dist
      - uses: actions/download-artifact@v4
        with:
          name: sdist
          path: dist

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          skip-existing: true

  upload_github_release:
    needs: [build_wheels, build_sdist]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    permissions:
      contents: write
    steps:
      - uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Flatten artifacts
        run: |
          mkdir dist
          find artifacts -name "*.whl" -exec cp {} dist/ \;
          find artifacts -name "*.tar.gz" -exec cp {} dist/ \;
          ls -la dist/

      - name: Upload to GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: dist/*
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
